# -*- coding: utf-8 -*-
"""unit testing/exception handling/asynchronous programming

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--CWUiUZ4PhfhckrVyVkXnE__xez4lnL

1. Check if a given number is prime:
"""

import unittest

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

class TestPrime(unittest.TestCase):
    def test_is_prime(self):
        self.assertTrue(is_prime(5))
        self.assertFalse(is_prime(4))
        self.assertTrue(is_prime(13))
        self.assertFalse(is_prime(1))

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""2. Check if a list is sorted in ascending order:"""

import unittest

def is_sorted(lst):
    return lst == sorted(lst)

class TestSorted(unittest.TestCase):
    def atest_is_sorted(self):
        self.assertTrue(is_sorted([1, 2, 3, 4, 5]))
        self.assertFalse(is_sorted([1, 3, 2, 5, 4]))
        self.assertTrue(is_sorted([]))
        self.assertTrue(is_sorted([1]))

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""3. Check if two lists are equal:

"""

import unittest

def are_lists_equal(lst1, lst2):
    return lst1 == lst2

class TestListsEqual(unittest.TestCase):
    def test_are_lists_equal(self):
        self.assertTrue(are_lists_equal([1, 2, 3], [1, 2, 3]))
        self.assertFalse(are_lists_equal([1, 2, 3], [3, 2, 1]))
        self.assertTrue(are_lists_equal([], []))
        self.assertFalse(are_lists_equal([1], [1, 2]))

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""4. Unit Test to Check if a String is a Palindrome"""

import unittest

def is_palindrome(s):
    return s == s[::-1]

class TestPalindrome(unittest.TestCase):
    def test_palindrome(self):
        self.assertTrue(is_palindrome("civic"))
        self.assertFalse(is_palindrome("hello"))
        self.assertTrue(is_palindrome("racecar"))
        self.assertTrue(is_palindrome(""))

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""5. Unit Test to Check if a File Exists in a Specified Directory"""

import unittest
import os

class TestFileExists(unittest.TestCase):
    def test_file_exists(self):
        self.assertTrue(os.path.isfile("existing_file.txt"))
        self.assertFalse(os.path.isfile("nonexistent_file.txt"))

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""6. Unit Test to Check Floating-Point Calculations"""

import unittest

def add_floats(a, b):
    return a + b

class TestFloatingPoint(unittest.TestCase):
    def test_add_floats(self):
        self.assertAlmostEqual(add_floats(0.1, 0.2), 0.3, places=7)
        self.assertAlmostEqual(add_floats(1.5, 1.5), 3.0, places=7)

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""7. Unit Test to Check Multi-Threading"""

import unittest
import threading

class TestMultiThreading(unittest.TestCase):
    def test_multithreading(self):
        def increment_counter(counter):
            for _ in range(1000):
                counter[0] += 1

        counter = [0]
        threads = [threading.Thread(target=increment_counter, args=(counter,)) for _ in range(10)]
        for thread in threads:
            thread.start()
        for thread in threads:
            thread.join()

        self.assertEqual(counter[0], 10000)

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""8. Unit Test to Check Database Connection"""

import unittest
import sqlite3

class TestDatabaseConnection(unittest.TestCase):
    def test_db_connection(self):
        try:
            conn = sqlite3.connect(':memory:')
            conn.close()
        except Exception as e:
            self.fail(f"Database connection failed: {e}")

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""9. Unit Test to Check Database Query"""

import unittest
import sqlite3

class TestDatabaseQuery(unittest.TestCase):
    def test_db_query(self):
        conn = sqlite3.connect(':memory:')
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE test (id INTEGER, name TEXT)")
        cursor.execute("INSERT INTO test VALUES (1, 'Kamil')")
        cursor.execute("INSERT INTO test VALUES (2, 'Ewa')")
        conn.commit()

        cursor.execute("SELECT name FROM test WHERE id = 1")
        result = cursor.fetchone()
        self.assertEqual(result[0], 'Kamil')

        conn.close()

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""10. Unit Test to Check Input Data Parsing and Validation"""

import unittest

def parse_and_validate(data):
    if not isinstance(data, dict):
        raise ValueError("Input data must be a dictionary")
    if 'name' not in data or not isinstance(data['name'], str):
        raise ValueError("Name is required and must be a string")
    if 'age' not in data or not isinstance(data['age'], int):
        raise ValueError("Age is required and must be an integer")
    return True

class TestInputDataParsing(unittest.TestCase):
    def test_parse_and_validate(self):
        valid_data = {'name': 'John', 'age': 30}
        self.assertTrue(parse_and_validate(valid_data))

        invalid_data = {'name': 'John', 'age': 'thirty'}
        with self.assertRaises(ValueError):
            parse_and_validate(invalid_data)

        invalid_data = {'name': 123, 'age': 30}
        with self.assertRaises(ValueError):
            parse_and_validate(invalid_data)

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

"""1. Write a Python program to handle a ZeroDivisionError exception when dividing a number by zero."""

try:
    result = 10 / 0
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")

"""2. Write a Python program that prompts the user to input an integer and raises a ValueError exception if the input is not a valid integer."""

try:
    num = int(input("Enter an integer: "))
except ValueError:
    print("Error: That was not a valid integer.")

"""3. Write a Python program that opens a file and handles a FileNotFoundError exception if the file does not exist."""

try:
    with open('non_existent_file.txt', 'r') as file:
        content = file.read()
except FileNotFoundError:
    print("Error: File not found.")

"""4. Write a Python program that prompts the user to input two numbers and raises a TypeError exception if the inputs are not numerical."""

try:
    num1 = float(input("Enter the first number: "))
    num2 = float(input("Enter the second number: "))
except ValueError:
    raise TypeError("Error: Both inputs must be numbers.")

"""5. Write a Python program that opens a file and handles a PermissionError exception if there is a permission issue."""

try:
    with open('restricted_file.txt', 'r') as file:
        content = file.read()
except PermissionError:
    print("Error: Permission denied.")

"""6. Write a Python program that executes an operation on a list and handles an IndexError exception if the index is out of range."""

my_list = [1, 2, 3]

try:
    print(my_list[5])
except IndexError:
    print("Error: Index out of range.")

"""7. Write a Python program that prompts the user to input a number and handles a KeyboardInterrupt exception if the user cancels the input."""

try:
    num = input("Enter a number: ")
except KeyboardInterrupt:
    print("\nInput cancelled by user.")

"""8. Write a Python program that executes division and handles an ArithmeticError exception if there is an arithmetic error."""

try:
    result = 10 / 0
except ArithmeticError:
    print("Error: An arithmetic error occurred.")

"""9. Write a Python program that opens a file and handles a UnicodeDecodeError exception if there is an encoding issue."""

try:
    with open('file_with_encoding_issues.txt', 'r', encoding='utf-8') as file:
        content = file.read()
except UnicodeDecodeError:
    print("Error: Unicode decoding error.")

"""10. Write a Python program that executes a list operation and handles an AttributeError exception if the attribute does not exist."""

my_list = [1, 2, 3]

try:
    my_list.append(4)
    my_list.non_existent_method()
except AttributeError:
    print("Error: List object has no such attribute.")

"""1. Write a Python program that creates an asynchronous function to print "Python Exercises!" with a two second delay."""

import asyncio

async def print_message():
    await asyncio.sleep(2)
    print("Python Exercises!")

await print_message()

"""2. Write a Python program that creates three asynchronous functions and displays their respective names with different delays (1 second, 2 seconds, and 3 seconds)."""

import asyncio

async def func1():
    await asyncio.sleep(1)
    print("Function 1")

async def func2():
    await asyncio.sleep(2)
    print("Function 2")

async def func3():
    await asyncio.sleep(3)
    print("Function 3")

async def main():
    await asyncio.gather(func1(), func2(), func3())

await main()

"""3. Write a Python program that creates an asyncio event loop and runs a coroutine that prints numbers from 1 to 7 with a delay of 1 second each."""

import asyncio

async def print_numbers():
    for i in range(1, 8):
        print(i)
        await asyncio.sleep(1)

await print_numbers()

"""4. Write a Python program that implements a coroutine to fetch data from two different URLs simultaneously using the "aiohttp" library."""

import asyncio
import aiohttp

async def fetch_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()

async def main():
    url1 = 'http://example.com'
    url2 = 'http://example.org'
    data1, data2 = await asyncio.gather(fetch_data(url1), fetch_data(url2))
    print(data1)
    print(data2)

await main()

"""5. Write a Python program that runs multiple asynchronous tasks concurrently using asyncio.gather() and measures the time taken."""

import asyncio
import time

async def task(name, delay):
    await asyncio.sleep(delay)
    print(f"Task {name} completed")

async def main():
    start_time = time.time()
    await asyncio.gather(task('A', 1), task('B', 2), task('C', 3))
    end_time = time.time()
    print(f"Total time taken: {end_time - start_time} seconds")

await main()

"""6. Write a Python program to create a coroutine that simulates a time-consuming task and use asyncio.CancelledError to handle task cancellation."""

import asyncio

async def long_task():
    try:
        await asyncio.sleep(10)
        print("Task completed")
    except asyncio.CancelledError:
        print("Task was cancelled")

async def main():
    task = asyncio.create_task(long_task())
    await asyncio.sleep(6)
    task.cancel()
    try:
        await task
    except asyncio.CancelledError:
        pass

await main()

"""7. Write a Python program that implements a timeout for an asynchronous operation using asyncio.wait_for()."""

import asyncio

async def long_task():
    await asyncio.sleep(5)
    return "Task completed"

async def main():
    try:
        result = await asyncio.wait_for(long_task(), timeout=2)
        print(result)
    except asyncio.TimeoutError:
        print("The task took too long and was timed out")

await main()

"""8. Write a Python program that uses asyncio queues to simulate a producer-consumer scenario with multiple producers and a single consumer."""

import asyncio
import random

async def producer(queue, id):
    for i in range(3):
        item = f"Item: {id}-{i}"
        await queue.put(item)
        print(f"Producer {id} produced-> {item}")
        await asyncio.sleep(random.uniform(0.1, 0.5))

async def consumer(queue):
    while True:
        item = await queue.get()
        if item is None:
            break
        print(f"Consumer consumed {item}")
        queue.task_done()

async def main():
    queue = asyncio.Queue()
    producers = [asyncio.create_task(producer(queue, i)) for i in range(3)]
    consumer_task = asyncio.create_task(consumer(queue))
    await asyncio.gather(*producers)
    await queue.join()
    await queue.put(None)
    await consumer_task

await main()