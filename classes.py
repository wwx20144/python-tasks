# -*- coding: utf-8 -*-
"""classes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CpGgHpX_8SNWBLqOJ8zPkzcSUm95n2aG

1. Write a Python program to import a built-in array module and display the namespace of the said module.
"""

import array
for name in array.__dict__:
    print(name)

"""2. Write a Python program to create a class and display the namespace of that class."""

class Person:
  def __init__(self, name, height, age):
    self.name = name
    self.height = height
    self.age = age
print(Person.__dict__)

"""3. Write a Python program to create an instance of a specified class and display the namespace of the said instance."""

class Person:
  def __init__(self, name, height, age):
    self.name = name
    self.height = height
    self.age = age
user = Person("User", 180, 25)
print(user.__dict__)

"""4. 'builtins' module provides direct access to all 'built-in' identifiers of Python.
Write a Python program that imports the abs() function using the builtins module, displays the documentation of the abs() function and finds the absolute value of -155.
"""

import builtins
help(builtins.abs)
print(builtins.abs(-155))

"""5. Define a Python function student(). Using function attributes display the names of all arguments."""

def student(name, lastname, age, index):
  pass
print(student.__code__.co_varnames)

"""6. Write a Python function student_data () that will print the ID of a student (student_id). If the user passes an argument student_name or student_class the function will print the student name and class."""

def student_data(student_id, student_name=None, student_class=None):
    print(f"Student ID: {student_id}")
    if student_name:
        print(f"Student Name: {student_name}")
    if student_class:
        print(f"Student Class: {student_class}")

student_data(123)
student_data(124, student_name="student1")
student_data(125, student_name="student2", student_class="7")

"""7. Write a simple Python class named Student and display its type. Also, display the __dict__ attribute keys and the value of the __module__ attribute of the Student class."""

class Student:
  pass
print("Student class type:", type(Student), "Student dict attribute keys:", Student.__dict__.keys(), "Student value of the module attribute:", Student.__module__)

"""8. Write a Python program to create two empty classes, Student and Marks. Now create some instances and check whether they are instances of the said classes or not. Also, check whether the said classes are subclasses of the built-in object class or not."""

class Student:
    pass
class Marks:
    pass
student_instance = Student()
marks_instance = Marks()
print("student_instance is instance of Student:", isinstance(student_instance, Student))
print("marks_instance is instance of Marks:", isinstance(marks_instance, Marks))
print("Student is subclass of object:", issubclass(Student, object))
print("Marks is subclass of object:", issubclass(Marks, object))

"""9. Write a Python class named Student with two attributes student_name, marks. Modify the attribute values of the said class and print the original and modified values of the said attributes."""

class Student:
  def __init__(self, student_name, marks):
    self.student_name = student_name
    self.marks = marks
student1 = Student("Alice", 4)
print({student1.student_name}, {student1.marks})
student1.student_name = "Albert"
student1.marks += 10
print({student1.student_name}, {student1.marks})

"""10. Write a Python class named Student with two attributes student_id, student_name. Add a new attribute student_class and display the entire attribute and the values of the class. Now remove the student_name attribute and display the entire attribute with values."""

class Student:
    def __init__(self, student_id, student_name):
        self.student_id = student_id
        self.student_name = student_name
student = Student(1, "Alice")
student.student_class = "7"
print(student.__dict__)
del student.student_name
print(student.__dict__)

"""11. Write a Python class named Student with two attributes: student_id, student_name. Add a new attribute: student_class. Create a function to display all attributes and their values in the Student class."""

class Student:
    def __init__(self, student_id, student_name):
        self.student_id = student_id
        self.student_name = student_name
        self.student_class = None
    def display(self):
        for name, value in self.__dict__.items():
            print(f"{name}: {value}")
student = Student(123, "Alice")
student.student_class = "7"
student.display()

"""12. Write a Python class named Student with two instances student1, student2 and assign values to the instances' attributes. Print all the attributes of the student1, student2 instances with their values in the given format."""

class Student:
    def __init__(self, student_id, student_name):
        self.student_id = student_id
        self.student_name = student_name
student1 = Student(123, "Alice")
student2 = Student(124, "Albert")
print(f"student_id: {student1.student_id}, student_name: {student1.student_name}")
print(f"student_id: {student2.student_id}, student_name: {student2.student_name}")

"""13. Write a Python class to convert an integer to a Roman numeral."""

class IntegerToRoman:
    def __init__(self):
        self.value_map = [
            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),
            (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),
            (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')
        ]
    def int_to_roman(self, num):
        roman = ''
        for value, symbol in self.value_map:
            while num >= value:
                roman += symbol
                num -= value
        return roman
converter = IntegerToRoman()
num = 1994
roman_numeral = converter.int_to_roman(num)
print(num, roman_numeral)
num = 63
roman_numeral = converter.int_to_roman(num)
print(num, roman_numeral)
num = 2635
roman_numeral = converter.int_to_roman(num)
print(num, roman_numeral)

"""14. Write a Python class to convert a Roman numeral to an integer."""

class RomanToInteger:
    def __init__(self):
        self.roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}

    def roman_to_int(self, s):
        total = 0
        prev_value = 0
        for char in s[::-1]:
            value = self.roman_map[char]
            if value < prev_value:
                total -= value
            else:
                total += value
            prev_value = value
        return total
converter = RomanToInteger()
roman_numeral = 'MCMXCIV'
num = converter.roman_to_int(roman_numeral)
print(roman_numeral, num)

"""15. Write a Python class to check the validity of a string of parentheses, '(', ')', '{', '}', '[' and ']. These brackets must be closed in the correct order, for example "()" and "()[]{}" are valid but "[)", "({[)]" and "{{{" are invalid."""

class ParenthesesValidator:
    def __init__(self):
        self.pair_map = {')': '(', '}': '{', ']': '['}
    def is_valid(self, s):
        stack = []
        for char in s:
            if char in self.pair_map.values():
                stack.append(char)
            elif char in self.pair_map.keys():
                if stack == [] or self.pair_map[char] != stack.pop():
                    return False
        return stack == []
validator = ParenthesesValidator()
test_string = "()[]{}"
is_valid = validator.is_valid(test_string)
print(test_string, ":", is_valid)
test_string = "()[}{]"
is_valid = validator.is_valid(test_string)
print(test_string, ":", is_valid)

"""16. Write a Python class to get all possible unique subsets from a set of distinct integers.
Input : [4, 5, 6]
Output : [[], [6], [5], [5, 6], [4], [4, 6], [4, 5], [4, 5, 6]]
"""

class Subsets:
    def unique_subsets(self, nums):
        result = [[]]
        for num in nums:
            result += [curr + [num] for curr in result]
        return result
subsets_finder = Subsets()
input_set = [4, 5, 6]
unique_subsets = subsets_finder.unique_subsets(input_set)
print(input_set,"-", unique_subsets)

"""17. Write a Python class to find a pair of elements (indices of the two numbers) from a given array whose sum equals a specific target number.
Note: There will be one solution for each input and do not use the same element twice.
Input: numbers= [10,20,10,40,50,60,70], target=50
"""

class PairFinder:
    def find_pair(self, numbers, target):
        seen = {}
        for i, num in enumerate(numbers):
            diff = target - num
            if diff in seen:
                return (seen[diff], i)
            seen[num] = i
        return None
pair_finder = PairFinder()
numbers = [10, 20, 10, 40, 50, 60, 70]
target = 50
result = pair_finder.find_pair(numbers, target)
print(target, "-", result)

"""18. Write a Python class to find the three elements that sum to zero from a set of n real numbers.
Input array : [-25, -10, -7, -3, 2, 4, 8, 10]
Output : [[-10, 2, 8], [-7, -3, 10]]
"""

class ThreeSum:
    def find_three_sum(self, nums):
        nums.sort()
        result = []
        for i in range(len(nums) - 2):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            left, right = i + 1, len(nums) - 1
            while left < right:
                total = nums[i] + nums[left] + nums[right]
                if total == 0:
                    result.append([nums[i], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif total < 0:
                    left += 1
                else:
                    right -= 1
        return result
three_sum_finder = ThreeSum()
input_array = [-25, -10, -7, -3, 2, 4, 8, 10]
three_sum_result = three_sum_finder.find_three_sum(input_array)
print(input_array, ":", three_sum_result)

"""19. Write a Python class to implement pow(x, n)."""

class Power:
    def my_pow(self, x, n):
        if n == 0:
            return 1
        elif n < 0:
            x = 1 / x
            n = -n
        result = 1
        while n:
            if n % 2:
                result *= x
            x *= x
            n //= 2
        return result
power_calculator = Power()
x, n = 2, 10
result = power_calculator.my_pow(x, n)
print(f"{x} to the power of {n} is {result}")

"""20. Write a Python class to reverse a string word by word.
Input string : 'hello .py'
Expected Output : '.py hello'
"""

class StringReverser:
    def reverse_words(self, s):
        return ' '.join(reversed(s.split()))
reverser = StringReverser()
input_string = "hello .py"
reversed_string = reverser.reverse_words(input_string)
print(reversed_string)

"""21. Write a Python class that has two methods: get_String and print_String , get_String accept a string from the user and print_String prints the string in upper case."""

class StringHandler:
    def __init__(self):
        self.string = ""
    def get_string(self):
        self.string = input("Enter a string: ")
    def print_string(self):
        print(self.string.upper())
handler = StringHandler()
handler.get_string()
handler.print_string()

"""22. Write a Python class named Rectangle constructed from length and width and a method that will compute the area of a rectangle."""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width
rectangle = Rectangle(4, 5)
print(rectangle.area())

"""23. Write a Python class named Circle constructed from a radius and two methods that will compute the area and the perimeter of a circle."""

import math
class Circle:
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return math.pi * self.radius ** 2
    def perimeter(self):
        return 2 * math.pi * self.radius
circle = Circle(3)
print("circle area:", circle.area())
print("circle perimeter:", circle.perimeter())

"""24. Write a Python program to get the class name of an instance in Python."""

class MyClass:
    pass
instance = MyClass()
class_name = instance.__class__.__name__
print("class name of instance:", class_name)

"""25. Write a Python class Employee with attributes like emp_id, emp_name, emp_salary, and emp_department and methods like calculate_emp_salary, emp_assign_department, and print_employee_details.
Sample Employee Data:
"ADAMS", "E7876", 50000, "ACCOUNTING"
"JONES", "E7499", 45000, "RESEARCH"
"MARTIN", "E7900", 50000, "SALES"
"SMITH", "E7698", 55000, "OPERATIONS"

    Use 'assign_department' method to change the department of an employee.
    Use 'print_employee_details' method to print the details of an employee.
    Use 'calculate_emp_salary' method takes two arguments: salary and hours_worked, which is the number of hours worked by the employee. If the number of hours worked is more than 50, the method computes overtime and adds it to the salary. Overtime is calculated as following formula:

overtime = hours_worked - 50
Overtime amount = (overtime * (salary / 50))
"""

class Employee:
    def __init__(self, emp_id, emp_name, emp_salary, emp_department):
        self.emp_id = emp_id
        self.emp_name = emp_name
        self.emp_salary = emp_salary
        self.emp_department = emp_department
    def calculate_emp_salary(self, hours_worked):
        overtime = max(0, hours_worked - 50)
        overtime_amount = overtime * (self.emp_salary / 50)
        return self.emp_salary + overtime_amount
    def emp_assign_department(self, new_department):
        self.emp_department = new_department
    def print_employee_details(self):
        print(f"ID: {self.emp_id}, Name: {self.emp_name}, Salary: {self.emp_salary}, Department: {self.emp_department}")
employees = [
    Employee("E7876", "ADAMS", 50000, "ACCOUNTING"),
    Employee("E7499", "JONES", 45000, "RESEARCH"),
    Employee("E7900", "MARTIN", 50000, "SALES"),
    Employee("E7698", "SMITH", 55000, "OPERATIONS")
]
employee = employees[0]
employee.emp_assign_department("HR")
employee.print_employee_details()
print(f"Calculated Salary with 60 hours worked: {employee.calculate_emp_salary(60)}")

"""26. Write a Python class Restaurant with attributes like menu_items, book_table, and customer_orders, and methods like add_item_to_menu, book_tables, and customer_order.
Perform the following tasks now:

    Now add items to the menu.
    Make table reservations.
    Take customer orders.
    Print the menu.
    Print table reservations.
    Print customer orders.

Note: Use dictionaries and lists to store the data.
"""

class Restaurant:
    def __init__(self):
        self.menu_items = {}
        self.booked_tables = {}
        self.customer_orders = []
    def add_item_to_menu(self, item_name, price):
        self.menu_items[item_name] = price
    def book_table(self, table_number, customer_name):
        self.booked_tables[table_number] = customer_name
    def customer_order(self, table_number, order_list):
        self.customer_orders.append({'table_number': table_number, 'order_list': order_list})
    def print_menu(self):
        print("Menu:")
        for item_name, price in self.menu_items.items():
            print(f"{item_name}: ${price}")
    def print_table_bookings(self):
        print("Table Bookings:")
        for table_number, customer_name in self.booked_tables.items():
            print(f"Table {table_number}: {customer_name}")
    def print_customer_orders(self):
        print("Customer Orders:")
        for order in self.customer_orders:
            print(f"Table {order['table_number']}: {order['order_list']}")
restaurant = Restaurant()
restaurant.add_item_to_menu("Pizza", 10)
restaurant.add_item_to_menu("Burger", 8)
restaurant.add_item_to_menu("Pasta", 12)
restaurant.book_table(1, "John Doe")
restaurant.book_table(2, "Jane Smith")
restaurant.customer_order(1, ["Pizza", "Burger"])
restaurant.customer_order(2, ["Pasta"])
restaurant.print_menu()
restaurant.print_table_bookings()
restaurant.print_customer_orders()

"""27. Write a Python class BankAccount with attributes like account_number, balance, date_of_opening and customer_name, and methods like deposit, withdraw, and check_balance."""

class BankAccount:
    def __init__(self, account_number, customer_name, balance, date_of_opening):
        self.account_number = account_number
        self.customer_name = customer_name
        self.balance = balance
        self.date_of_opening = date_of_opening
    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited {amount}. New balance is {self.balance}.")
    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds!")
        else:
            self.balance -= amount
            print(f"Withdrew {amount}. New balance is {self.balance}.")
    def check_balance(self):
        print(f"Current balance is {self.balance}.")
account = BankAccount("123456789", "Alice", 1000, "2023-01-01")
account.deposit(500)
account.withdraw(300)
account.check_balance()

"""28. Write a Python class Inventory with attributes like item_id, item_name, stock_count, and price, and methods like add_item, update_item, and check_item_details.
Use a dictionary to store the item details, where the key is the item_id and the value is a dictionary containing the item_name, stock_count, and price.
"""

class Inventory:
    def __init__(self):
        self.items = {}
    def add_item(self, item_id, item_name, stock_count, price):
        self.items[item_id] = {
            'item_name': item_name,
            'stock_count': stock_count,
            'price': price
        }
    def update_item(self, item_id, stock_count=None, price=None):
        if item_id in self.items:
            if stock_count is not None:
                self.items[item_id]['stock_count'] = stock_count
            if price is not None:
                self.items[item_id]['price'] = price
        else:
            print(f"Item with ID {item_id} not found.")

    def check_item_details(self, item_id):
        if item_id in self.items:
            return self.items[item_id]
        else:
            print(f"Item with ID {item_id} not found.")
            return None
inventory = Inventory()
inventory.add_item("001", "Laptop", 10, 1000)
inventory.add_item("002", "Mouse", 50, 25)
inventory.update_item("001", stock_count=15)
item_details = inventory.check_item_details("001")
if item_details:
    print(f"Item details for '001': {item_details}")
item_details = inventory.check_item_details("002")
if item_details:
    print(f"Item details for '002': {item_details}")