# -*- coding: utf-8 -*-
"""functions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pyfltvtf6qcu_Rp-JWPUQQV33UORG9gr

1. Write a Python function to find the maximum of three numbers.
"""

def maxvalue(num1, num2, num3):
  numbers = [num1, num2, num3]
  return max(numbers)

print(maxvalue(4,71,10))

"""2. Write a Python function to sum all the numbers in a list.
Sample List : (8, 2, 3, 0, 7)
Expected Output : 20
"""

numbers = [8, 2, 3, 0, 7]
def sumnumbers(values):
  sum = 0
  for x in values:
    sum += x
  return sum
print(sumnumbers(numbers))

"""3. Write a Python function to multiply all the numbers in a list.
Sample List : (8, 2, 3, -1, 7)
Expected Output : -336
"""

numbers = [8, 2, 3, -1, 7]
def sumnumbers(values):
  sum = 1
  for x in values:
    sum *= x
  return sum
print(sumnumbers(numbers))

"""4. Write a Python program to reverse a string.
Sample String : "1234abcd"
Expected Output : "dcba4321"
"""

inputstring = "this is a test"
def reversestring(text):
  return text[::-1]
print(reversestring(inputstring))

"""5. Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument."""

def factorial(num):
  x = 1
  i = 1
  while x <= num:
    i *= x
    x += 1
  return i
print(factorial(10))

"""6. Write a Python function to check whether a number falls within a given range."""

values = [4,7]
def checkrange(number, range):
  if number >= range[0] and number <= range[1]:
    return True
  else:
    return False
print(checkrange(5, values))

"""7. Write a Python function that accepts a string and counts the number of upper and lower case letters.
Sample String : 'The quick Brow Fox'
Expected Output :
No. of Upper case characters : 3
No. of Lower case Characters : 12
"""

inputstring = "The quick Brow Fox"
def countchars(text):
  up = 0
  low = 0
  for x in text:
    if x.isupper() == True:
      up += 1
    elif x.islower() == True:
      low += 1
    else:
      pass
  return up, low
print(countchars(inputstring))

"""8. Write a Python function that takes a list and returns a new list with distinct elements from the first list.
Sample List : [1,2,3,3,3,3,4,5]
Unique List : [1, 2, 3, 4, 5]
"""

startlist = [1,2,3,3,3,3,4,5]
def checkunique(inputlist):
  return list(dict.fromkeys(inputlist))
print(checkunique(startlist))

"""9. Write a Python function that takes a number as a parameter and checks whether the number is prime or not.
Note : A prime number (or a prime) is a natural number greater than 1 and that has no positive divisors other than 1 and itself.
"""

def isprime(number):
  if number == 1:
    return False
  else:
    for x in range(2, number):
      if number % x == 0:
        return False
    return True
print(isprime(7))

"""10. Write a Python program to print the even numbers from a given list.
Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9]
Expected Result : [2, 4, 6, 8]
"""

startlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]
def returneven(inputlist):
  returnlist = []
  for x in inputlist:
    if x % 2 == 0:
      returnlist.append(x)
  return returnlist
print(returneven(startlist))

"""11. Write a Python function to check whether a number is "Perfect" or not.
According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).
Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed by the perfect numbers 496 and 8128.
"""

def isperfect(number):
  sum = 0
  for x in range(1, number):
    if number % x == 0:
      sum += x
  if sum == number:
    return True
  else:
    return False
print(isperfect(8128))

"""12. Write a Python function that checks whether a passed string is a palindrome or not.
Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.
"""

def ispalindrome(inputstr):
  returnstring = inputstr[::-1]
  return returnstring.replace(" ", "") == inputstr.replace(" ", "")
print(ispalindrome("nurses run"))

"""13. Write a Python function that prints out the first n rows of Pascal's triangle.
Note : Pascal's triangle is an arithmetic and geometric figure first imagined by Blaise Pascal.
Each number is the two numbers above it added together
"""

def print_pascals_triangle(n):
    if n <= 0:
        return
    triangle = [[1]]

    for i in range(1, n):
        row = [1]
        for j in range(1, i):
            row.append(triangle[i-1][j-1] + triangle[i-1][j])
        row.append(1)
        triangle.append(row)
    for row in triangle:
        print(' '.join(map(str, row)))
n = 5
print_pascals_triangle(n)

"""14. Write a Python function to check whether a string is a pangram or not.
Note : Pangrams are words or sentences containing every letter of the alphabet at least once.
For example : "The quick brown fox jumps over the lazy dog"
"""

import string
#print(string.ascii_lowercase)
alphabet = dict.fromkeys(string.ascii_lowercase, 0)
#print(alphabet)
def pangram(inputstr):
  for x in inputstr:
    if x in alphabet:
      alphabet[x]+=1
  return all(value >= 1 for value in alphabet.values())
pangram("The quick brown fox jumps over the lazy dog")

"""15. Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.
Sample Items : green-red-yellow-black-white
Expected Result : black-green-red-white-yellow
"""

def sorthyphen(inputstr):
  itemlist = inputstr.split("-")
  itemlist.sort()
  return "-".join(itemlist)
print(sorthyphen("green-red-yellow-black-white"))

"""16. Write a Python function to create and print a list where the values are the squares of numbers between 1 and 30 (both included)."""

import math
def sqrtnum(num):
  for x in range(1, num+1):
    print(x**2)
sqrtnum(30)

"""17. Write a Python program to create a chain of function decorators (bold, italic, underline etc.)."""

def bold(x):
  def tag():
    return "<b>" + x() + "</b>"
  return tag
def italic(x):
  def tag():
    return "<i>" + x() + "</i>"
  return tag
def underline(x):
  def tag():
    return "<u>" + x() + "</u>"
  return tag
@bold
@italic
@underline
def stringprint():
  return "sample string"
print(stringprint())

"""18. Write a Python program to execute a string containing Python code."""

codestring = """print("sample code created as string")"""
exec(codestring)

"""19. Write a Python program to access a function inside a function."""

def outside(x):
  def inside(y=3):
    return x * y
  return inside()
print(outside(4))

"""20. Write a Python program to detect the number of local variables declared in a function."""

def variables():
  x = 1
  y = 4
  z = 8
  a = "one"
  b = "two"
  c = "three"
print(variables.__code__.co_nlocals)

"""21. Write a Python program that invokes a function after a specified period of time.

"""

import time
def delayed(inputstr):
  time.sleep(5)
  print(inputstr)
delayed("test")